@page "/dynamic"
@using Jinget.Blazor.Components.DynamicComponent
@using Jinget.Blazor.Components.Table
@using Jinget.Blazor.Components.Popup
@using Jinget.Blazor.Models
@using Jinget.Blazor.Services
@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Attributes.Input
@using Jinget.Blazor.Attributes.Picker
@using Jinget.Blazor.Services.Contracts
@using MudBlazor;
@using Jinget.Core.Enumerations;
@using Jinget.Core.ExtensionMethods.Collections;
@using Jinget.Blazor.Components.Picker

@inject IJSRuntime js;

<JingetMessageBox @ref=@messageBox
                  ShowVerboseFuncAsync=@(async ()=>await Task.FromResult<bool>(true))></JingetMessageBox>
<hr />
<JingetDynamicForm Model=@Model1></JingetDynamicForm>
<MudButton FullWidth=true
           OnClick="Submit1"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Submit</MudText>
</MudButton>
<hr />
<JingetDynamicForm @ref=dynamicForm Model=@Model></JingetDynamicForm>

<MudButton FullWidth=true
           OnClick="Submit"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Submit</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="ViewElements"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>View Form elements</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindType"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by type</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindId"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by id</MudText>
</MudButton>

@code {
    JingetDynamicForm<SampleModel> dynamicForm;

    public class InquiryByDateFromViewModel
    {
        [Attributes.Picker.JingetDateRangePicker(DisplayName = "تاریخ", HasLabel = false, Culture = "fa-IR")]
        public SelectedDateRangeModel? Date { get; set; }
    }

    JingetMessageBox? messageBox;
    public InquiryByDateFromViewModel? Model1 { get; set; }

    public SampleModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
        Model1 = new();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task Submit1()
    {
        await messageBox.ShowInfoAsync(
        Model1.Date == null ? "" : Model1.Date.ToString(),
        "",
        Newtonsoft.Json.JsonConvert.SerializeObject(Model1));
    }
    async Task Submit()
    {
        await messageBox.ShowInfoAsync(
        Model.Name,
        $"{Model.Name} {Model.LastName}",
        Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    }

    async Task ViewElements()
    {
        await messageBox.ShowInfoAsync("Elements on page", "", Newtonsoft.Json.JsonConvert.SerializeObject(new { dynamicForm.DynamicFields }, new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }
    async Task FindType()
    {
        var y = dynamicForm.FindElement<JingetComboBox>();
        foreach (var i in y)
        {
            await i.SelectComboItem(js, ((JingetComboBox)i.Attribute).Id, 3);
            await InvokeAsync(StateHasChanged);        
        }

        await messageBox.ShowInfoAsync("Elements on page", "", Newtonsoft.Json.JsonConvert.SerializeObject(new { y }, new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }

    async Task FindId()
    {
        var y = dynamicForm.FindElement("cmbSearch");
        foreach (var i in y)
        {
            await i.SelectComboItem(js, ((JingetComboBox)i.Attribute).Id, 1);
            await InvokeAsync(StateHasChanged);
        }

        await messageBox.ShowInfoAsync("Elements on page", "", Newtonsoft.Json.JsonConvert.SerializeObject(new { y }, new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }

    public record SampleModel
    {
        public SampleModel()
        {

        }
        ITokenStorageService tokenService;
        ILocalStorageService localStorage;
        public SampleModel(IServiceProvider serviceProvider)
        {
            tokenService = serviceProvider.GetRequiredService<ITokenStorageService>();
            localStorage = serviceProvider.GetRequiredService<ILocalStorageService>();
        }
        [JingetTextBox(DisplayName = "نام", HelperText = "نام خود را منطبق با اطلاعات کارت ملی وارد نمایید", Order = 1)]
        public string? Name { get; set; }

        [JingetTextBox(DisplayName = "نام خانوادگی", HelperText = "نام خانوادگی خود را منطبق با اطلاعات کارت ملی وارد نمایید", Order = 2)]
        public string? LastName { get; init; }

        [JingetPasswordBox(DisplayName = "رمز عبور", Order = 3)]
        public string? Password { get; init; }

        [JingetEmailBox(DisplayName = "پست الکترونیکی", Order = 4)]
        public string? EMail { get; init; }

        [Attributes.Picker.JingetDatePicker(DisplayName = "تاریخ تولد", Culture = "fa-IR", Order = 5)]
        public string? DoB { get; init; }

        [Attributes.Picker.JingetDateRangePicker(DisplayName = "بازه زمانی سفر", Culture = "fa-IR", Order = 6)]
        public DateRange? TravelDate { get; init; }

        [JingetLabel(DisplayName = "امتیاز اکتسابی", HasLabel = false)]
        public int Score { get; init; } = 1850;

        [JingetTextArea(DisplayName = "اطلاعات بیشتر", Rows = 3)]
        public string? Description { get; init; }

        [JingetNumberBox(DisplayName = "سن", Order = 7)]
        public int Age { get; set; }

        [JingetComboBox(DisplayName = "وضعیت2", Id = "cmb2", BindingFunction = nameof(GetStatusAsync), DefaultText = "---انتخاب کنید---",
        HasLabel = true, LabelCssClass = "overlayed-label", Order = 8, GetTokenBeforeBinding = true)]
        public int? Status2 { get; init; }

        [JingetComboBox(DisplayName = "وضعیت", Id = "cmbSearch",
        BindingFunction = nameof(GetStatusAsync), PreBindingFunction = nameof(PreBinding), PostBindingFunction = nameof(PostBinding),
        Searchable = true, DefaultText = "---انتخاب کنید---", HasLabel = true, LabelCssClass = "overlayed-label", Order = 9, GetTokenBeforeBinding = true)]
        public int? Status { get; init; }
        public async Task<string> PreBinding(string? token) => await Task.FromResult("This is pre binding");
        public async Task<string> PostBinding(string? token, object? preBindingResult, object? data) => await Task.FromResult("This is post binding");
        public async Task<List<DropDownItemModel>> GetStatusAsync(string token, object? preBindingResult)
            => await new JingetComboBox().BindAsync<StatusModel>(async () =>
            {
                var t = preBindingResult;
                return await Task.FromResult(new List<StatusModel>{
                            new StatusModel{Code= 1,Title= token },
                        new StatusModel{Code= 2,Title= "غیرفعال"},
                        new StatusModel{Code= 3,Title= "نامشخص" }
                                                                                                                                                                                                                        });
            });


        class StatusModel : BaseTypeModel
        {

        }

    }

}