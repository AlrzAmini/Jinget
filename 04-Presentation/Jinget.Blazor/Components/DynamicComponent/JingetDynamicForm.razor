@using System.Reflection;
@using Jinget.Core.Utilities
@using MudBlazor
@using Jinget.Blazor.Components.Picker

@typeparam T

<MudRTLProvider RightToLeft=@Rtl>
    <MudGrid>
        @foreach (var p in Properties)
        {
            <MudItem lg="6" md="6" xs="12" sm="6" Style=@(Rtl?"font-family:IRANSans":"")>
                <JingetDynamicField Id="@(string.IsNullOrWhiteSpace(p.Attribute?.Id)?Guid.NewGuid().ToString():p.Attribute.Id)"
                                    Value=@(p.Property.DeclaringType==typeof(string) && p.Property.GetValue(Model)==null?"":p.Property.GetValue(Model))
                                    Attribute="@p.Attribute"
                                    Binding="@p.Property"
                                    DynamicFieldAdded="@((e)=>OnDynamicFieldAdded(e))"
                                    ValueChanged="@((e)=>OnValueChanged(p.Property.Name, e))" />
            </MudItem>

        }
    </MudGrid>
</MudRTLProvider>
@code {
    [Parameter] public T? Model { get; set; }
    [Parameter] public bool Rtl { get; set; } = true;

    /// <summary>
    /// This event raised whenever a member's value changed
    /// </summary>
    [Parameter] public EventCallback<Dictionary<string, object?>> OnModelChanged { get; set; }

    /// <summary>
    /// This event raised whenever a field rendered on page
    /// </summary>
    [Parameter] public EventCallback<JingetDynamicField> OnFieldReady { get; set; }

    /// <summary>
    /// return the list of fields rendered on page
    /// </summary>
    public List<JingetDynamicField> DynamicFields { get; private set; } = [];
    
    public HashSet<(PropertyInfo Property, JingetFormElement? Attribute)> Properties { get; set; } = new();

    protected override void OnInitialized()
    {
        if (Model != null)
        {
            IOrderedEnumerable<PropertyInfo> props = Model.GetType().GetProperties()
            .Where(x => x.IsDefined(typeof(JingetFormElement)))
            .OrderBy(x => x.GetCustomAttribute<JingetFormElement>().Order);
            foreach (var p in props)
            {
                Properties.Add(new(
                    p,
                    p.GetCustomAttribute<JingetFormElement>()));
            }
        }
    }

    async Task OnDynamicFieldAdded(JingetDynamicField field)
    {
        DynamicFields.RemoveAll(x => (x.Binding != null && x.Binding.Name == field.Binding.Name) || x.Id == field.Id);
        DynamicFields.Add(field);
        await OnFieldReady.InvokeAsync(field);
    }

    public List<JingetDynamicField> FindElement(string id)
    {
        return DynamicFields.Where(x => x.Id == id).ToList();
    }
    public List<JingetDynamicField> FindElement<TFormElementType>() where TFormElementType : JingetFormElement
    {
        return DynamicFields.Where(x => x.Attribute is TFormElementType).ToList();
    }

    void OnValueChanged(string prop, object? value)
    {
        if (Model != null)
        {
            var p = Model.GetType().GetProperty(prop);
            var previousValue = p?.GetValue(Model);
            object? convertedValue = null;

            try
            {
                Type t = Nullable.GetUnderlyingType(p.PropertyType) ?? p.PropertyType;
                if (value is not IConvertible && t == typeof(string))
                {
                    value = value == null ? null : value?.ToString();
                }

                if (value is SelectedDateRangeModel dateRangeValue)
                {
                    if (t == typeof(DateRange))
                    {
                        convertedValue = Convert.ChangeType(dateRangeValue.DateRange, t);
                    }
                    else
                    {
                        convertedValue = Convert.ChangeType(dateRangeValue, t);
                    }
                }
                else
                {
                    if (value is IConvertible)
                    {
                        convertedValue = (value == null) ? null : Convert.ChangeType(value, t);
                    }
                    else
                    {
                        convertedValue = (value == null) ? null : Convert.ChangeType(value.ToString(), t);
                    }
                }
                p?.SetValue(Model, convertedValue);
                StateHasChanged();
            }
            catch { }

            Dictionary<string, object?> info = new Dictionary<string, object?>
        {
            {"Model",Model},
            {"PreviousValue",previousValue},
            {"CurrentValue",value},
            {"ConvertedValue",convertedValue},
            {"PropertyName",prop}
        };
            OnModelChanged.InvokeAsync(info);
        }
    }
}