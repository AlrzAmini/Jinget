@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Attributes.Input
@using Jinget.Blazor.Attributes.Picker
@using Jinget.Blazor.Models
@using MudBlazor
@using Jinget.Blazor.Components.Picker
@using Microsoft.JSInterop
@using System.Reflection;
@using System.Runtime.CompilerServices;
@using Microsoft.VisualStudio.Threading;
@using Jinget.Core.ExtensionMethods.Reflection;
@using System.Globalization
@using Jinget.Blazor;
@using Newtonsoft.Json

@inject IJSRuntime JS;
@inject ITokenStorageService tokenService;
@inject IServiceProvider serviceProvider;

@if (Attribute != null && Attribute.HasLabel)
{
    <label class="@Attribute.LabelCssClass">@Attribute.DisplayName</label>
}

@if (Attribute is Jinget.Blazor.Attributes.Picker.JingetDatePicker datePicker)
{
    <JingetDatePicker Value="@(Value==null?null:Convert.ToDateTime(Value))"
                      Label="@Attribute.DisplayName"
                      Culture=@datePicker.Culture
                      EnglishNumber=datePicker.EnglishNumber
                      DateChanged="@((e)=>OnChange(new ChangeEventArgs(){Value=e}))" />

}
else if (Attribute is Jinget.Blazor.Attributes.Picker.JingetDateRangePicker dateRangePicker)
{
    <JingetDateRangePicker Value="@(Value is SelectedDateRangeModel?((SelectedDateRangeModel)Value).DateRange: (DateRange)Value)"
                           Label="@Attribute.DisplayName"
                           Culture=@dateRangePicker.Culture
                           EnglishNumber=dateRangePicker.EnglishNumber
                           DateRangeChanged="((e)=>OnChange(new ChangeEventArgs(){Value=e}))">
    </JingetDateRangePicker>
}
else if (Attribute is JingetComboBox comboBox && comboBox.Searchable == false)
{
    <MudSelect T="string"
               Value="Value==null?default: Value.ToString()"
               HelperText="@comboBox.HelperText"
               Strict=true
               Label="@comboBox.DisplayName"
               Variant="Variant.Outlined"
               ValueChanged="OnItemSelected">
        <MudSelectItem Disabled=true Value="0.ToString()">@comboBox.DefaultText</MudSelectItem>
        @foreach (DropDownItemModel item in _data)
        {
            <MudSelectItem Value="@item.Value?.ToString()">@item.Text</MudSelectItem>
        }
    </MudSelect>
}
else if (Attribute is JingetComboBox searchableComboBox && searchableComboBox.Searchable == true)
{
    @if (connected)
    {
        <select id="@Id" onchange=@OnChange class="@Attribute.CssClass">
            <option value="">@searchableComboBox.DefaultText</option>
            @foreach (var item in _data)
            {
                @* bool selected = item.Selected == true || (item.Value != null && Value != null && item.Value.ToString().Equals(Value.ToString())); *@
                bool selected = item.Value != null && Value != null && item.Value.ToString().Equals(Value.ToString());
                if (selected)
                {
                    Task.Run(() => JS.InvokeVoidAsync("selectItem", Id, Value).GetAwaiter().GetResult());
                }
                <option value="@item.Value" selected="@selected">@item.Text</option>
            }
        </select>
    }
}
else if (Attribute is JingetLabel label)
{
    <MudField HelperText="@label.HelperText"
              Label="@label.DisplayName"
              Variant="Variant.Outlined">@labelText</MudField>
}
else if (Attribute is JingetTextBox textbox)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@textbox.DisplayName"
                  HelperText="@textbox.HelperText"
                  Variant="Variant.Outlined"
                  TextChanged="OnTextChanged" />
}
else if (Attribute is JingetTextArea textArea)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@textArea.DisplayName"
                  HelperText="@textArea.HelperText"
                  Variant="Variant.Outlined"
                  Lines=@textArea.Rows
                  TextChanged="OnTextChanged" />
}
else if (Attribute is JingetPasswordBox passwordBox)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@passwordBox.DisplayName"
                  HelperText="@passwordBox.HelperText"
                  Variant="Variant.Outlined"
                  InputType=@InputType.Password
                  TextChanged="OnTextChanged" />
}
else if (Attribute is JingetNumberBox numberBox)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@numberBox.DisplayName"
                  HelperText="@numberBox.HelperText"
                  Variant="Variant.Outlined"
                  InputType=@InputType.Number
                  TextChanged="OnTextChanged" />
}
else if (Attribute is JingetEmailBox emailBox)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@emailBox.DisplayName"
                  HelperText="@emailBox.HelperText"
                  Variant="Variant.Outlined"
                  InputType=@InputType.Email
                  TextChanged="OnTextChanged" />
}
else if (Attribute is JingetTelephoneBox telephoneBox)
{
    <MudTextField Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@telephoneBox.DisplayName"
                  HelperText="@telephoneBox.HelperText"
                  Variant="Variant.Outlined"
                  InputType=@InputType.Telephone
                  TextChanged="OnTextChanged" />
}
else
{
    <input id="@Id" type="@Attribute.ToString()" value="@Value" onchange="@OnChange" class="@Attribute.CssClass" />
}

@code {

    [Parameter] public string? Id { get; set; }
    [Parameter] public JingetFormElement? Attribute { get; set; }
    [Parameter] public object? Value { get; set; }

    [JsonIgnore]
    [Parameter] public PropertyInfo? Binding { get; set; }

    [JsonIgnore]
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    [JsonIgnore]
    [Parameter] public EventCallback<JingetDynamicField> DynamicFieldAdded { get; set; }

    [JsonProperty]
    List<DropDownItemModel> _data = [];

    bool connected = false;
    private DotNetObjectReference<JingetDynamicField>? dotNetObjRef;
    string? labelText = "";

    protected override async Task OnInitializedAsync()
    {

        if (Attribute is JingetLabel label)
        {
            labelText = Value == null ? "" : Value.ToString();
        }
        dotNetObjRef = DotNetObjectReference.Create(this);
        if (Attribute is JingetComboBox comboBox)
        {
            _data = await GetData();
            if (comboBox.Searchable)
            {
                connected = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Attribute is JingetComboBox comboBox)
        {
            if (comboBox.Searchable)
            {
                await JS.InvokeVoidAsync("convertToSearchable", dotNetObjRef, Id);
            }
        }
        if (firstRender)
            await DynamicFieldAdded.InvokeAsync(new JingetDynamicField
                {
                    Attribute = this.Attribute,
                    Id = this.Id,
                    Value = this.Value,
                    _data = this._data
                });
    }

    public async Task SelectComboItem(IJSRuntime js, string id, object? value)
    {
        Value = value;
        if (((JingetComboBox)Attribute).Searchable)
        {
            await js.InvokeVoidAsync("selectItem", id, value);
        }
    }

    [JSInvokable]
    public void OnItemSelected(object value) => OnChange(new ChangeEventArgs() { Value = value });
    void OnTextChanged(string value) => OnChange(new ChangeEventArgs() { Value = value });

    async void OnChange(ChangeEventArgs e) => await ValueChanged.InvokeAsync(e.Value);

    object? InvokeBindingFunction(string? functionName, params object[] parameters)
    {
        if (functionName == null)
            return null;
        var method = Binding?.DeclaringType?.GetMethod(functionName);
        if (method != null)
        {
            object? callerObject = null;
            if (Binding?.DeclaringType != null)
            {
                if (Binding.DeclaringType.GetConstructor(new[] { typeof(IServiceProvider) }) != null)
                    callerObject = Activator.CreateInstance(Binding.DeclaringType, new object[] { serviceProvider });
                else if (Binding.DeclaringType.GetConstructor(Type.EmptyTypes) != null)
                    callerObject = Activator.CreateInstance(Binding.DeclaringType, null);
                else
                    throw new Exception("Properties with JingetComboBox attribute should have a constructor with IServieProvider parameter or should have a parameterless constructor.");
            }

            object? data = null;

            if (callerObject != null)
            {
                if (method.GetCustomAttribute(typeof(AsyncStateMachineAttribute)) != null)
                {
                    data = method.InvokeAsync(callerObject, parameters);
                }
                else
                {
                    data = method.Invoke(callerObject, parameters);
                }
            }

            if (data != null)
                return data;
        }

        return null;
    }

    async Task<List<DropDownItemModel>> GetData()
    {
        string? token = null;
        var requireToken = (Attribute as JingetComboBox)?.GetTokenBeforeBinding;
        if (requireToken.HasValue && requireToken.Value == true)
        {
            token = await tokenService.GetTokenAsync();
        }

        var preBindingFunction = (Attribute as JingetComboBox)?.PreBindingFunction;
        object? preBindingResult = null;
        if (!string.IsNullOrWhiteSpace(preBindingFunction))
        {
            preBindingResult = InvokeBindingFunction(preBindingFunction, token);
        }

        object? data;
        var bindingFunction = (Attribute as JingetComboBox)?.BindingFunction;
        data = InvokeBindingFunction(bindingFunction, token, preBindingResult);

        data = data == null ? new List<DropDownItemModel>() : data;

        var postBindingFunction = (Attribute as JingetComboBox)?.PostBindingFunction;
        object? postBindingResult = null;
        if (!string.IsNullOrWhiteSpace(postBindingFunction))
        {
            postBindingResult = InvokeBindingFunction(postBindingFunction, token, preBindingResult, data);
        }

        return (List<DropDownItemModel>)data;
    }

    Converter<object?>
    StringConverter = new Converter<object?>
        {
            SetFunc = value => value?.ToString(),
            GetFunc = text => text?.ToString(),
        };
}
