@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Attributes.Input
@using Jinget.Blazor.Attributes.Picker
@using Jinget.Blazor.Models
@using MudBlazor
@using Jinget.Blazor.Components.Picker
@using Microsoft.JSInterop
@using System.Reflection;
@using System.Runtime.CompilerServices;
@using Microsoft.VisualStudio.Threading;
@using Jinget.Core.ExtensionMethods.Reflection;
@using System.Globalization
@using Jinget.Blazor;
@using Newtonsoft.Json
@using Jinget.Blazor.Components.DropDownList;

@inject IJSRuntime JS;
@inject ITokenStorageService tokenService;
@inject IServiceProvider serviceProvider;

@if (Attribute != null && Attribute.HasLabel)
{
    <label class="@Attribute.LabelCssClass">@Attribute.DisplayName</label>
}

@if (Attribute is Jinget.Blazor.Attributes.Picker.JingetDatePicker datePicker)
{
    <JingetDatePicker @ref=RefObject
                      Value="@(Value==null?null:Convert.ToDateTime(Value))"
                      Label="@Attribute.DisplayName"
                      Culture=@datePicker.Culture
                      EnglishNumber=datePicker.EnglishNumber
                      Disabled="@Attribute.IsDisabled"
                      ReadOnly="@Attribute.IsReadOnly"
                      DateChanged="@((e)=>OnChange(new ChangeEventArgs(){Value=e}))" />

}
else if (Attribute is Jinget.Blazor.Attributes.Picker.JingetDateRangePicker dateRangePicker)
{
    <JingetDateRangePicker @ref=RefObject
                           Value="@(Value is SelectedDateRangeModel?((SelectedDateRangeModel)Value).DateRange: (DateRange)Value)"
                           Label="@Attribute.DisplayName"
                           Culture=@dateRangePicker.Culture
                           EnglishNumber=dateRangePicker.EnglishNumber
                           Disabled="@Attribute.IsDisabled"
                           ReadOnly="@Attribute.IsReadOnly"
                           DateRangeChanged="((e)=>OnChange(new ChangeEventArgs(){Value=e}))">
    </JingetDateRangePicker>
}
else if (Attribute is JingetComboBox comboBox && comboBox.Searchable == false)
{
    <JingetDropDownList @ref=RefObject
                        CssClass="@Attribute.CssClass"
                        HelperText="@comboBox.HelperText"
                        Id="@Id"
                        IsDisabled=@Attribute.IsDisabled
                        IsReadOnly=@Attribute.IsReadOnly
                        DisplayName="@Attribute.DisplayName"
                        DefaultText="@comboBox.DefaultText"
                        DataProviderFunc=@GetData
                        Value=@Value
                        OnChange=@OnChange></JingetDropDownList>
}
else if (Attribute is JingetComboBox searchableComboBox && searchableComboBox.Searchable == true)
{
    <JingetSearchableDropDownList @ref=RefObject
                                  CssClass="@Attribute.CssClass"
                                  Id="@Id"
                                  IsDisabled=@Attribute.IsDisabled
                                  DefaultText="@searchableComboBox.DefaultText"
                                  DataProviderFunc=@GetData
                                  Value=@Value
                                  OnChange=@OnChange>
    </JingetSearchableDropDownList>
}
else if (Attribute is JingetLabel label)
{
    <MudField HelperText="@label.HelperText"
              Label="@label.DisplayName"
              Disabled="@Attribute.IsDisabled"
              id="@Id"
              Variant="Variant.Outlined">@(Value == null ? "" : Value.ToString())</MudField>
}
else if (Attribute is JingetInputElement attr)
{
    <MudTextField @ref=RefObject
                  Converter="@StringConverter"
                  @bind-Value="Value"
                  Label="@attr.DisplayName"
                  HelperText="@attr.HelperText"
                  Disabled="@attr.IsDisabled"
                  ReadOnly="@attr.IsReadOnly"
                  Variant="Variant.Outlined"
                  InputType=@attr.GetInputType()
                  id="@Id"
                  Lines="@(attr is JingetTextArea? ((JingetTextArea)Attribute).Rows:1)"
                  TextChanged="OnTextChanged" />
}
else
{
    <input @ref=RefObject
           id="@Id"
           type="@Attribute.ToString()"
           value="@Value"
           onchange="@OnChange"
           class="@Attribute.CssClass"
           disabled="@Attribute.IsDisabled"
           readonly="@Attribute.IsReadOnly" />
}

@code {

    [JsonProperty]
    public object RefObject { get; set; }


    [JsonProperty]
    [Parameter] public string? Id { get; set; }

    [JsonProperty]
    [Parameter] public JingetFormElement? Attribute { get; set; }

    [JsonProperty]
    [Parameter] public object? Value { get; set; }

    [JsonProperty]
    [Parameter] public PropertyInfo? Binding { get; set; }

    /// <summary>
    /// This event raised whenever a field's value changed
    /// </summary>
    [JsonIgnore]
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    /// <summary>
    /// This event raised whenever a field rendered on page
    /// </summary>
    [JsonIgnore]
    [Parameter] public EventCallback<JingetDynamicField> DynamicFieldAdded { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await OnDynamicFieldAdded();
    }
    async Task OnDynamicFieldAdded()
    {
        await DynamicFieldAdded.InvokeAsync(this);
    }

    void OnTextChanged(string value) => OnChange(new ChangeEventArgs() { Value = value });

    public async void OnChange(ChangeEventArgs e)
    {
        await OnDynamicFieldAdded();
        await ValueChanged.InvokeAsync(e.Value);
    }

    object? InvokeBindingFunction(string? functionName, params object[] parameters)
    {
        if (functionName == null)
            return null;
        var method = Binding?.DeclaringType?.GetMethod(functionName);
        if (method != null)
        {
            object? callerObject = null;
            if (Binding?.DeclaringType != null)
            {
                if (Binding.DeclaringType.GetConstructor(new[] { typeof(IServiceProvider) }) != null)
                    callerObject = Activator.CreateInstance(Binding.DeclaringType, new object[] { serviceProvider });
                else if (Binding.DeclaringType.GetConstructor(Type.EmptyTypes) != null)
                    callerObject = Activator.CreateInstance(Binding.DeclaringType, null);
                else
                    throw new Exception("Properties with JingetComboBox attribute should have a constructor with IServieProvider parameter or should have a parameterless constructor.");
            }

            object? data = null;

            if (callerObject != null)
            {
                if (method.GetCustomAttribute(typeof(AsyncStateMachineAttribute)) != null)
                {
                    data = method.InvokeAsync(callerObject, parameters);
                }
                else
                {
                    data = method.Invoke(callerObject, parameters);
                }
            }

            if (data != null)
                return data;
        }

        return null;
    }

    async Task<List<DropDownItemModel>> GetData()
    {
        string? token = null;
        var requireToken = (Attribute as JingetComboBox)?.GetTokenBeforeBinding;
        if (requireToken.HasValue && requireToken.Value == true)
        {
            token = await tokenService.GetTokenAsync();
        }

        var preBindingFunction = (Attribute as JingetComboBox)?.PreBindingFunction;
        object? preBindingResult = null;
        if (!string.IsNullOrWhiteSpace(preBindingFunction))
        {
            preBindingResult = InvokeBindingFunction(preBindingFunction, token);
        }

        object? data;
        var bindingFunction = (Attribute as JingetComboBox)?.BindingFunction;
        data = InvokeBindingFunction(bindingFunction, token, preBindingResult);

        data = data == null ? new List<DropDownItemModel>() : data;

        var postBindingFunction = (Attribute as JingetComboBox)?.PostBindingFunction;
        object? postBindingResult = null;
        if (!string.IsNullOrWhiteSpace(postBindingFunction))
        {
            postBindingResult = InvokeBindingFunction(postBindingFunction, token, preBindingResult, data);
        }

        return (List<DropDownItemModel>)data;
    }

    Converter<object?>
    StringConverter = new Converter<object?>
        {
            SetFunc = value => value?.ToString(),
            GetFunc = text => text?.ToString(),
        };
}
