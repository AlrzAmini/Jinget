@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor
@inject IJSRuntime JS;
@inherits JingetDatePickerBase;

<MudDateRangePicker id="@id" @ref=@_dateRangePicker
                    Disabled=@Disabled
                    ReadOnly=@ReadOnly
                    Label=@Label
                    Editable=false
                    ImmediateText=false
                    Clearable=@Clearable
                    MinDate=@MinDate
                    MaxDate=@MaxDate
                    DateRange=@Value
                    Required=@Required
                    RequiredError="@RequiredError"
                    Culture=@CalendarService.GetCulture(Culture)
                    TitleDateFormat=@DateFormat
                    DateFormat=@DateFormat
                    Mask=@(new DateMask(DateFormat))
                    AdditionalDateClassesFunc=@CustomDateStyleFunc
                    IsDateDisabledFunc=@DisabledDateFunc
                    DateRangeChanged=@DateRangeChangedAsync
                    PickerOpened=@OnOpen />
@code {
    MudDateRangePicker _dateRangePicker;
    [Parameter] public DateRange? Value { get; set; }
    [Parameter] public override string Label { get; set; } = "بازه تاریخی";

    [Parameter] public EventCallback<SelectedDateRangeModel> DateRangeChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (EnglishNumber)
            await JS.InvokeVoidAsync("toEnglishNumber", id);
    }

    async Task DateRangeChangedAsync(DateRange e)
    {
        var dateRange = new DateRange(e.Start, e.End);
        await DateRangeChanged.InvokeAsync(new SelectedDateRangeModel
            {
                DateRange = dateRange,
                StartDateJalali = e.Start.HasValue ? Jinget.Core.Utilities.DateTimeUtility.ToSolarDate(e.Start.Value) : null,
                EndDateJalali = e.End.HasValue ? Jinget.Core.Utilities.DateTimeUtility.ToSolarDate(e.End.Value) : null
            }
        );
    }

    async Task OnOpen()
    {
        await JS.InvokeVoidAsync("gotoDate", id);
    }
}