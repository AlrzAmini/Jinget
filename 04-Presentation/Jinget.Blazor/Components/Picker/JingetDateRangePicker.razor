@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor
@inherits JingetDatePickerBase;

<MudDateRangePicker @ref=@_dateRangePicker
                    id="@Id"
                    Disabled=@IsDisabled
                    ReadOnly=@IsReadOnly
                    Label=@Label
                    Editable=false
                    ImmediateText=false
                    Clearable=@Clearable
                    MinDate=@MinDate
                    MaxDate=@MaxDate
                    DateRange=@((DateRange?)Value)
                    Required=@IsRequired
                    RequiredError="@RequiredError"
                    Culture=@CalendarService.GetCulture(Culture)
                    TitleDateFormat=@DateFormat
                    DateFormat=@DateFormat
                    Mask=@(new DateMask(DateFormat))
                    AdditionalDateClassesFunc=@CustomDateStyleFunc
                    IsDateDisabledFunc=@DisabledDateFunc
                    DateRangeChanged=@DateRangeChangedAsync
                    PickerOpened=@OnOpenAsync />
@code {
    MudDateRangePicker? _dateRangePicker;

    [Parameter] public override string Label { get; set; } = "بازه تاریخی";

    [Parameter] public EventCallback<SelectedDateRangeModel> DateRangeChanged { get; set; }

    async Task DateRangeChangedAsync(DateRange e)
    {
        var dateRange = new DateRange(e.Start, e.End);
        await DateRangeChanged.InvokeAsync(new SelectedDateRangeModel
            {
                DateRange = dateRange,
                StartDateJalali = e.Start.HasValue ? Jinget.Core.Utilities.DateTimeUtility.ToSolarDate(e.Start.Value) : null,
                EndDateJalali = e.End.HasValue ? Jinget.Core.Utilities.DateTimeUtility.ToSolarDate(e.End.Value) : null
            }
        );
    }
}