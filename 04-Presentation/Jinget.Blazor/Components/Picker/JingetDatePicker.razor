@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor;
@using System.Runtime.CompilerServices
@inherits JingetDatePickerBase;
<MudDatePicker id=@Id
               @ref=_datePicker
               Disabled=@IsDisabled
               ReadOnly=@IsReadOnly
               Label=@Label
               Editable=@Editable
               ImmediateText=false
               Clearable=@Clearable
               MinDate=@MinDate
               MaxDate=@MaxDate
               Date=@((DateTime?)Value)
               Required=@IsRequired
               RequiredError="@RequiredError"
               Culture=@CalendarService.GetCulture(Culture)
               TitleDateFormat=@DateFormat
               DateFormat=@DateFormat
               Mask=@(new DateMask(DateFormat))
               AdditionalDateClassesFunc=@CustomDateStyleFunc
               IsDateDisabledFunc=@DisabledDateFunc
               DateChanged=@((e)=>DateChangedAsync(e))
               PickerOpened=@OnOpen>
</MudDatePicker>

@code {
    MudDatePicker? _datePicker;

    [Parameter] public override string Label { get; set; } = "تاریخ";
    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _datePicker.GoToDate();
        }
    }

    async Task DateChangedAsync(DateTime? e)
    {
        if (e != null && e.HasValue)
        {
            await _datePicker.GoToDate(e.Value);
        }
        await DateChanged.InvokeAsync(e).ConfigureAwait(false);
    }

    async Task OnOpen()
    {
        await JS.InvokeVoidAsync("refreshDatePicker");
        await base.OnOpenAsync();
    }
}