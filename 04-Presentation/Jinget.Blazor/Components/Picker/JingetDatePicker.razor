@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor;
@inject IJSRuntime JS;
@inherits JingetDatePickerBase;
<MudDatePicker id=@id @ref=_datePicker
               Disabled=@Disabled
               ReadOnly=@ReadOnly
               Label=@Label
               Editable=@Editable
               ImmediateText=false
               Clearable=@Clearable
               MinDate=@MinDate
               MaxDate=@MaxDate
               Date=@Value
               Required=@Required
               RequiredError="@RequiredError"
               Culture=@CalendarService.GetCulture(Culture)
               TitleDateFormat=@DateFormat
               DateFormat=@DateFormat
               Mask=@(new DateMask(DateFormat))
               AdditionalDateClassesFunc=@CustomDateStyleFunc
               IsDateDisabledFunc=@DisabledDateFunc
               DateChanged=@DateChangedAsync
               PickerOpened=@OnOpen />

@code {
    MudDatePicker _datePicker;

    [Parameter] public DateTime? Value { get; set; }
    [Parameter] public override string Label { get; set; } = "تاریخ";
    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (EnglishNumber)
            await JS.InvokeVoidAsync("toEnglishNumber", id );
    }

    async Task DateChangedAsync(DateTime? e)
    {
        if (e != null && e.HasValue)
        {
            await _datePicker.GoToDate(e.Value);
        }
        await DateChanged.InvokeAsync(e).ConfigureAwait(false);
    }

    async Task OnOpen()
    {
        await JS.InvokeVoidAsync("refreshDatePicker");
    }
}