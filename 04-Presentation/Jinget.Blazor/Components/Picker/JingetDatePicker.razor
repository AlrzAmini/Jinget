@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor;
@using System.Runtime.CompilerServices
@inject IJSRuntime JS;
@inherits JingetDatePickerBase;
<MudDatePicker id=@id
               @ref=_datePicker
               Disabled=@Disabled
               ReadOnly=@ReadOnly
               Label=@Label
               Editable=@Editable
               ImmediateText=false
               Clearable=@Clearable
               MinDate=@MinDate
               MaxDate=@MaxDate
               Date=@Value
               Required=@Required
               RequiredError="@RequiredError"
               Culture=@CalendarService.GetCulture(Culture)
               TitleDateFormat=@DateFormat
               DateFormat=@DateFormat
               Mask=@(new DateMask(DateFormat))
               AdditionalDateClassesFunc=@CustomDateStyleFunc
               IsDateDisabledFunc=@DisabledDateFunc
               DateChanged=@((e)=>DateChangedAsync(e))
               PickerOpened=@OnOpen>
</MudDatePicker>

@code {
MudDatePicker? _datePicker;

DateTime? _previousValue;
DateTime? _currentValue;

[Parameter]
public DateTime? Value
{
    get => _currentValue;
    set
    {
        _previousValue = Value;
        _currentValue = value;
    }
}
[Parameter] public override string Label { get; set; } = "تاریخ";
[Parameter] public EventCallback<DateTime?> DateChanged { get; set; }


protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (EnglishNumber)
        await JS.InvokeVoidAsync("toEnglishNumber", id);

    if (firstRender)
    {
        _datePicker.GoToDate();
    }
}

async Task DateChangedAsync(DateTime? e)
{
    if (e == _previousValue || e == _currentValue)
        return;
    if (e != null && e.HasValue)
    {
        await _datePicker.GoToDate(e.Value);
    }
    await DateChanged.InvokeAsync(e).ConfigureAwait(false);
}

async Task OnOpen()
{
    await JS.InvokeVoidAsync("refreshDatePicker");
    await JS.InvokeVoidAsync("gotoDate", id);
}
}