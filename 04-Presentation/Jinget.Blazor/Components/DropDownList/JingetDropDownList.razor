@using MudBlazor
@inherits JingetDropDownListBase;
@if (IsSearchable)
{
    @if (connected)
    {
        <select id="@Id" onchange=@((object e)=>OnSelectedItemChangedAsync(e)) class="@CssClass" disabled="@IsDisabled" required="@IsRequired">
            <option value="">@DefaultText</option>
            @foreach (var item in Items)
            {
                bool selected = item.Value != null && Value != null && item.Value.ToString().Equals(Value.ToString());
                if (selected)
                {
                    Task.Run(() =>
                    {
                        JS.InvokeVoidAsync("selectItem", Id, Value).GetAwaiter().GetResult();
                    });
                }
                <option value="@item.Value" selected="@selected">@item.Text</option>
            }
            @if (Value == null)
            {
                Task.Run(() =>
                {
                    JS.InvokeVoidAsync("clearSelectItem", Id).GetAwaiter().GetResult();
                });
            }
        </select>
        @if (IsRequired && (SelectedItem == null || string.IsNullOrWhiteSpace(SelectedItem.Value?.ToString())))
        {
            <label style="color:red">@RequiredError</label>
        }
    }
}
else
{
    <MudSelect T="string"
               Value="@(Value==null?default: Value.ToString())"
               HelperText="@HelperText"
               Strict=true
               Disabled="@IsDisabled"
               ReadOnly="@IsReadOnly"
               Label="@DisplayName"
               Required="@IsRequired"
               RequiredError="@RequiredError"
               id="@Id"
               ValueChanged=@OnSelectedItemChangedAsync>
        <MudSelectItem Disabled=true Value="0.ToString()">@DefaultText</MudSelectItem>
        @foreach (JingetDropDownItemModel item in Items)
        {
            <MudSelectItem Value="@item.Value?.ToString()">@item.Text</MudSelectItem>
        }
    </MudSelect>
}
@code {
    private DotNetObjectReference<JingetDropDownList>? dotNetObjRef;
    protected override async Task OnInitializedAsync()
    {
        if (IsSearchable)
        {
            dotNetObjRef = DotNetObjectReference.Create(this);
        }
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsSearchable)
        {
            //calling convertToSearchable makes the select input searchable. this functionality is mainly powered by js selectize library.
            await JS.InvokeVoidAsync("convertToSearchable", dotNetObjRef, Id);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}